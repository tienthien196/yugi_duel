# ===========================================================================
# NetworkManager.gd - Qu·∫£n l√Ω k·∫øt n·ªëi multiplayer d√πng ENet (Godot 3.6)
# Autoload Singleton
# Ch·ª©c nƒÉng:
#   - Kh·ªüi t·∫°o server ENet
#   - Qu·∫£n l√Ω k·∫øt n·ªëi/disconnect
#   - Nh·∫≠n v√† ƒë·ªãnh tuy·∫øn tin nh·∫Øn
#   - G·ª≠i d·ªØ li·ªáu v·ªÅ client
# ===========================================================================
extends Node

# C·ªïng server s·∫Ω l·∫Øng nghe
const DEFAULT_PORT = 8080

# Peer ID c·ªßa server (lu√¥n l√† 1)
const SERVER_PEER_ID = 1

# Tr·∫°ng th√°i
var multiplayer_peer = null
var is_server = false

# Danh s√°ch peer_id ‚Üí player_id (mapping)
var peer_to_player = {}

# Signal ƒë·ªÉ g·ª≠i tin hi·ªáu ƒë·∫øn c√°c manager kh√°c
signal client_connected(player_id, peer_id)
signal client_disconnected(peer_id)
signal message_received(player_id, message)

# ===========================================================================
# _ready()
# Kh·ªüi t·∫°o server ENet
# ===========================================================================
func _ready():
	# Thi·∫øt l·∫≠p multiplayer
	get_tree().network_peer = _create_server(DEFAULT_PORT)
	var error = get_tree().network_peer
	if error:
		is_server = true
		print("üåê NetworkManager: Server ƒëang ch·∫°y tr√™n c·ªïng %d" % DEFAULT_PORT)
	else:
		push_error("‚ùå NetworkManager: Kh√¥ng th·ªÉ kh·ªüi t·∫°o server ENet")
		return

	# K·∫øt n·ªëi c√°c signal
	get_tree().connect("network_peer_connected", self, "_on_peer_connected")
	get_tree().connect("network_peer_disconnected", self, "_on_peer_disconnected")
	get_tree().connect("connected_to_server", self, "_on_connected_to_server")
	get_tree().connect("connection_failed", self, "_on_connection_failed")

# ===========================================================================
# _create_server(port) ‚Üí NetworkedMultiplayerENet
# T·∫°o server ENet l·∫Øng nghe tr√™n c·ªïng
# ===========================================================================
func _create_server(port):
	var enet = NetworkedMultiplayerENet.new()
	var err = enet.create_server(port, 32)  # T·ªëi ƒëa 32 client
	if err != OK:
		push_error("L·ªói t·∫°o server ENet: %d" % err)
		return null
	return enet

# ===========================================================================
# _process(delta)
# X·ª≠ l√Ω tin nh·∫Øn m·∫°ng
# ===========================================================================
func _process(delta):
	if not is_server or not multiplayer.network_peer:
		return
	# ƒê·∫£m b·∫£o x·ª≠ l√Ω t·∫•t c·∫£ tin nh·∫Øn
	multiplayer.poll()

# ===========================================================================
# _on_peer_connected(peer_id)
# Khi client k·∫øt n·ªëi th√†nh c√¥ng
# peer_id: ID do ENet c·∫•p (2, 3, 4,...)
# ===========================================================================
func _on_peer_connected(peer_id):
	print("üü¢ Client k·∫øt n·ªëi: peer_id=%d" % peer_id)
	# G√°n t·∫°m player_id theo peer_id
	var player_id = "player_%d" % peer_id
	peer_to_player[peer_id] = player_id
	# Ph√°t t√≠n hi·ªáu ƒë·ªÉ c√°c manager kh√°c x·ª≠ l√Ω (v√≠ d·ª• AuthManager)
	emit_signal("client_connected", player_id, peer_id)
	# G·ª≠i ph·∫£n h·ªìi ch√†o m·ª´ng
	var welcome_msg = {
		"type": "WELCOME",
		"your_player_id": player_id,
		"server_time": OS.get_unix_time()
	}
	rpc_id(peer_id, "receive_message", welcome_msg)

# ===========================================================================
# _on_peer_disconnected(peer_id)
# Khi client ng·∫Øt k·∫øt n·ªëi
# ===========================================================================
func _on_peer_disconnected(peer_id):
	var player_id = peer_to_player.get(peer_id, "unknown")
	print("üî¥ Client ng·∫Øt k·∫øt n·ªëi: peer_id=%d, player_id=%s" % [peer_id, player_id])
	peer_to_player.erase(peer_id)
	emit_signal("client_disconnected", peer_id)

# ===========================================================================
# _on_connected_to_server()
# (Ch·ªâ d√πng n·∫øu l√† client ‚Äì kh√¥ng c·∫ßn thi·∫øt cho server)
# ===========================================================================
func _on_connected_to_server():
	pass

# ===========================================================================
# _on_connection_failed()
# (Ch·ªâ d√πng n·∫øu l√† client)
# ===========================================================================
func _on_connection_failed():
	pass

# ===========================================================================
# receive_message(message) ‚Üê RPC
# H√†m nh·∫≠n tin nh·∫Øn t·ª´ client (g·ªçi qua RPC)
# ===========================================================================
remote func receive_message(message):
	var peer_id = get_tree().get_network_peer().get_packet_peer()
	var player_id = peer_to_player.get(peer_id, "unknown")
	
	if message.type == null:
		_send_error(peer_id, "MISSING_MESSAGE_TYPE")
		return
	
	print("üì© Nh·∫≠n tin: peer_id=%d | player_id=%s | type=%s" % [peer_id, player_id, message.type])
	
	# Ph√°t t√≠n hi·ªáu ƒë·ªÉ c√°c manager kh√°c x·ª≠ l√Ω (AuthManager, ServerManager)
	emit_signal("message_received", player_id, message)

# ===========================================================================
# send_message_to_player(player_id, data)
# G·ª≠i tin v·ªÅ 1 ng∆∞·ªùi ch∆°i
# ===========================================================================
func send_message_to_player(player_id, data):
	var peer_id = _get_peer_from_player(player_id)
	if peer_id == 0:
		push_warning("Kh√¥ng t√¨m th·∫•y peer cho player: %s" % player_id)
		return
	rpc_id(peer_id, "receive_message", data)

# ===========================================================================
# broadcast_message(data, exclude_player = null)
# G·ª≠i tin ƒë·∫øn t·∫•t c·∫£ client (tr·ª´ 1 n·∫øu c·∫ßn)
# ===========================================================================
func broadcast_message(data, exclude_player = null):
	for peer_id in peer_to_player:
		if exclude_player:
			var p = peer_to_player[peer_id]
			if p == exclude_player:
				continue
		rpc_id(peer_id, "receive_message", data)

# ===========================================================================
# _get_peer_from_player(player_id) ‚Üí int
# T√¨m peer_id t·ª´ player_id
# ===========================================================================
func _get_peer_from_player(player_id):
	for pid in peer_to_player:
		if pid == player_id:
			return peer_to_player[pid]
	return 0

# ===========================================================================
# _send_error(peer_id, error_code, message = "")
# G·ª≠i ph·∫£n h·ªìi l·ªói v·ªÅ client
# ===========================================================================
func _send_error(peer_id, error_code, message = ""):
	var err_msg = {
		"type": "ERROR",
		"code": error_code,
		"message": message if message else "L·ªói: %s" % error_code
	}
	rpc_id(peer_id, "receive_message", err_msg)

# ===========================================================================
# shutdown()
# T·∫Øt server
# ===========================================================================
func shutdown():
	if multiplayer.network_peer:
		multiplayer.network_peer.close()
		multiplayer.network_peer = null
		print("üõë NetworkManager: Server ƒë√£ t·∫Øt")
