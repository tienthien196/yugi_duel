# ===========================================================================
# train_agent.gd - Hu·∫•n luy·ªán Agent h·ªçc t·ª´ tr·∫≠n ƒë·∫•u Yu-Gi-Oh!
# D√πng Agent.gd (hybrid: Q-Learning + Rule-based response)
# ===========================================================================

extends Node

# S·ªë tr·∫≠n ƒë·ªÉ hu·∫•n luy·ªán
const TRAINING_GAMES = 100

# B·ªô b√†i m·∫´u
var deck = [
	"BLUE_EYES_WHITE_DRAGON",
	"DARK_MAGICIAN",
	"MIRROR_FORCE",
	"GYOUKI",
	"SACK",
	"EFFECT_VEILER",
	"BOOK_OF_MOON",
	"CARD_001",
	"CARD_002",
	"CARD_003"
]

# ===========================================================================
# _ready()
# B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán
# ===========================================================================
func _ready():
	print("üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán Agent cho %d tr·∫≠n..." % TRAINING_GAMES)
	
	for i in range(TRAINING_GAMES):
		print("üéÆ Tr·∫≠n #%d" % (i + 1))
		_train_one_game(deck, deck)
	
	# L∆∞u model sau khi h·ªçc xong
	Agent.save_q_table()
	print("üéâ Ho√†n th√†nh hu·∫•n luy·ªán %d tr·∫≠n! Model ƒë√£ ƒë∆∞·ª£c l∆∞u." % TRAINING_GAMES)


# ===========================================================================
# _train_one_game(deck_a, deck_b)
# Ch·∫°y m·ªôt tr·∫≠n ƒë·∫•u gi·ªØa Agent v√† Bot (random)
# ===========================================================================
func _train_one_game(deck_a, deck_b):
	# Kh·ªüi t·∫°o tr·∫≠n ƒë·∫•u
	var room_id = BattleCore.start_duel("agent", "bot", deck_a, deck_b)
	if not room_id:
		print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr·∫≠n ƒë·∫•u")
		return
	
	var game_over = false
	var current_state = BattleCore.get_game_state(room_id, "agent")
	
	# V√≤ng l·∫∑p tr·∫≠n ƒë·∫•u
	while not game_over:
		var game_data = BattleCore.active_duels[room_id]
		if not game_data:
			break
		
		var current_player = game_data.turn
		
		if current_player == "agent":
			# L∆∞·ª£t c·ªßa Agent
			var available_actions = BattleCore.get_available_actions(room_id, "agent")
			if available_actions.empty():
				game_over = true
				continue
			
			# 1. Agent ch·ªçn h√†nh ƒë·ªông ch√≠nh
			var action_type = Agent.get_action(current_state, "agent", available_actions)
			var action = {
				"player_id": "agent",
				"type": action_type
			}
			
			# 2. ƒêi·ªÅn payload (c√≥ th·ªÉ m·ªü r·ªông sau)
			action["payload"] = _build_payload(action_type, current_state, "agent")
			
			# 3. G·ª≠i h√†nh ƒë·ªông
			var result = BattleCore.submit_action(room_id, action)
			
			# 4. H·ªçc t·ª´ k·∫øt qu·∫£
			Agent.learn_from_result(current_state, action, result)
			
			# 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i
			var new_state = BattleCore.get_game_state(room_id, "agent")
			current_state = new_state
			
			# 6. X·ª≠ l√Ω s·ª± ki·ªán: c√≥ c·∫ßn ph·∫£n ·ª©ng kh√¥ng?
			var response = Agent.on_event(new_state, result["events"], "agent")
			if response:
				var response_result = BattleCore.submit_action(room_id, response)
				# C√≥ th·ªÉ h·ªçc th√™m t·ª´ ph·∫£n ·ª©ng
				Agent.learn_from_result(new_state, response, response_result)
				current_state = BattleCore.get_game_state(room_id, "agent")
			
			# 7. Ki·ªÉm tra k·∫øt th√∫c
			if result["events"].find({"type": "WIN"}) or new_state["status"] == "finished":
				game_over = true
				
		else:
			# L∆∞·ª£t c·ªßa bot ƒë·ªëi th·ªß (random)
			var available = BattleCore.get_available_actions(room_id, "bot")
			if available.empty():
				game_over = true
				continue
			
			var action_type = available[randi() % available.size()]
			var action = {
				"player_id": "bot",
				"type": action_type
			}
			
			# T·∫°o payload ƒë∆°n gi·∫£n
			action["payload"] = _build_payload(action_type, BattleCore.get_game_state(room_id, "bot"), "bot")
			
			BattleCore.submit_action(room_id, action)
		
		# Ki·ªÉm tra tr·∫°ng th√°i tr·∫≠n
		var duel = BattleCore.active_duels.get(room_id)
		if not duel or duel.status == "finished":
			game_over = true
	
	print("‚úÖ Tr·∫≠n ƒë·∫•u k·∫øt th√∫c.")


# ===========================================================================
# _build_payload(action_type, game_state, player_id)
# T·∫°o payload h·ª£p l·ªá cho h√†nh ƒë·ªông
# (C√≥ th·ªÉ m·ªü r·ªông th√†nh logic ch·ªçn b√†i th√¥ng minh)
# ===========================================================================
func _build_payload(action_type, game_state, player_id):
	var payload = {}
	var player = game_state["players"][player_id]
	
	match action_type:
		"PLAY_MONSTER":
			# Ch·ªçn qu√°i ƒë·∫ßu ti√™n tr√™n tay
			for card_id in player["hand"]:
				if CardDatabase.exists(card_id):
					var card = CardDatabase.get(card_id)
					if card["type"] == "Monster":
						payload["card_id"] = card_id
						payload["from_zone"] = "hand"
						payload["to_zone"] = _find_empty_zone(player["monster_zones"])
						payload["position"] = "face_up_attack"
						return payload
			return null  # Kh√¥ng c√≥ qu√°i
			
		"SET_MONSTER", "SET_SPELL", "SET_TRAP":
			payload["to_zone"] = _find_empty_zone(
				player["spell_trap_zones"] if "SPELL" in action_type or "TRAP" in action_type 
				else player["monster_zones"]
			)
			# T√¨m b√†i ph√π h·ª£p
			for card_id in player["hand"]:
				if CardDatabase.exists(card_id):
					var card = CardDatabase.get(card_id)
					if ("SPELL" in action_type and card["type"] == "Spell") or \
					   ("TRAP" in action_type and card["type"] == "Trap") or \
					   ("MONSTER" in action_type and card["type"] == "Monster"):
						payload["card_id"] = card_id
						return payload
			return null
			
		"PLAY_SPELL", "PLAY_TRAP":
			payload["to_zone"] = _find_empty_zone(player["spell_trap_zones"])
			# T∆∞∆°ng t·ª± nh∆∞ tr√™n
			for card_id in player["hand"]:
				if CardDatabase.exists(card_id):
					var card = CardDatabase.get(card_id)
					if ("SPELL" in action_type and card["type"] == "Spell") or \
					   ("TRAP" in action_type and card["type"] == "Trap"):
						payload["card_id"] = card_id
						return payload
			return null
			
		"DECLARE_ATTACK":
			# T√¨m qu√°i t·∫•n c√¥ng
			for i in range(5):
				var card = player["monster_zones"][i]
				if card and card["position"] == "face_up_attack" and not card.has("attacked_this_turn"):
					var opp = game_state["players"][_get_opponent_id(game_state, player_id)]
					# T√¨m m·ª•c ti√™u
					for j in range(5):
						if opp.monster_zones[j]:
							payload["attacker"] = card["card_id"]
							payload["target"] = opp.monster_zones[j].card_id
							return payload
					# N·∫øu kh√¥ng c√≥ qu√°i ‚Üí t·∫•n c√¥ng tr·ª±c ti·∫øp
					payload["attacker"] = card["card_id"]
					payload["target"] = null
					return payload
			return null
			
		"CHANGE_POSITION":
			for i in range(5):
				var card = player["monster_zones"][i]
				if card and card["position"] == "face_up_attack":
					payload["card_id"] = card["card_id"]
					payload["to_position"] = "defense"
					payload["face"] = "up"
					return payload
			return null
			
		"ACTIVATE_EFFECT":
			# T√¨m b√†i c√≥ th·ªÉ k√≠ch ho·∫°t
			for zone in player["monster_zones"]:
				if zone:
					payload["card_id"] = zone["card_id"]
					return payload
			for zone in player["spell_trap_zones"]:
				if zone and zone["status"] == "face_up":
					payload["card_id"] = zone["card_id"]
					return payload
			return null
			
		"END_TURN", "END_PHASE", "DRAW_CARD", "SURRENDER":
			# Kh√¥ng c·∫ßn payload
			pass
	
	return payload


# ===========================================================================
# H√†m h·ªó tr·ª£
# ===========================================================================
func _find_empty_zone(zones):
	for i in range(zones.size()):
		if zones[i] == null:
			return i
	return 0  # M·∫∑c ƒë·ªãnh

func _get_opponent_id(game_state, player_id):
	for pid in game_state["players"].keys():
		if pid != player_id:
			return pid
	return null

================================================================================

