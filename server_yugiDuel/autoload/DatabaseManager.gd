# ===========================================================================
# DatabaseManager.gd - Qu·∫£n l√Ω d·ªØ li·ªáu ng∆∞·ªùi ch∆°i (Godot 3.6)
# Autoload Singleton
# Ch·ª©c nƒÉng:
#   - ƒêƒÉng k√Ω / ƒëƒÉng nh·∫≠p ng∆∞·ªùi ch∆°i
#   - L∆∞u deck, stats, l·ªãch s·ª≠
#   - D√πng JSON ƒë·ªÉ l∆∞u tr·ªØ ƒë∆°n gi·∫£n
# ===========================================================================
extends Node

const SAVE_PATH = "user://players.json"
var players_data = {}

# ===========================================================================
# _ready()
# N·∫°p d·ªØ li·ªáu ng∆∞·ªùi ch∆°i t·ª´ file
# ===========================================================================
func _ready():
	_load_players()
	randomize()  # ƒê·∫£m b·∫£o randi() ho·∫°t ƒë·ªông

# ===========================================================================
# _load_players()
# ƒê·ªçc file JSON, n·∫øu kh√¥ng c√≥ th√¨ t·∫°o m·ªõi
# ===========================================================================
func _load_players():
	if not File.new().file_exists(SAVE_PATH):
		players_data = {}
		print("üÜï T·∫°o file d·ªØ li·ªáu ng∆∞·ªùi ch∆°i m·ªõi.")
		return

	var file = File.new()
	if file.open(SAVE_PATH, File.READ) != OK:
		push_error("‚ùå Kh√¥ng th·ªÉ m·ªü file: %s" % SAVE_PATH)
		players_data = {}
		return

	var json_str = file.get_as_text()
	file.close()

	var parse = JSON.parse(json_str)
	if parse.error != OK:
		push_error("‚ùå L·ªói parse JSON: %s" % parse.error_string)
		players_data = {}
		return

	players_data = parse.result if typeof(parse.result) == TYPE_DICTIONARY else {}
	print("‚úÖ ƒê√£ n·∫°p d·ªØ li·ªáu %d ng∆∞·ªùi ch∆°i." % players_data.size())

# ===========================================================================
# _save_players()
# L∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i xu·ªëng file
# ===========================================================================
func _save_players():
	var file = File.new()
	if file.open(SAVE_PATH, File.WRITE) != OK:
		push_error("‚ùå Kh√¥ng th·ªÉ ghi file: %s" % SAVE_PATH)
		return

	file.store_string(JSON.print(players_data))
	file.close()
	print("üíæ ƒê√£ l∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i.")

# ===========================================================================
# register(username, password) ‚Üí Dict
# ƒêƒÉng k√Ω ng∆∞·ªùi ch∆°i m·ªõi
# ===========================================================================
func register(username, password):
	if players_data.has(username):
		return { "success": false, "error": "USERNAME_EXISTS" }

	players_data[username] = {
		"username": username,
		"password_hash": _hash_password(password),
		"created_at": OS.get_unix_time(),
		"last_login": 0,
		"lp": 8000,
		"deck": [
			"BLUE_EYES_WHITE_DRAGON", "DARK_MAGICIAN",
			"POT_OF_GREED", "MONSTER_REBORN", "MIRROR_FORCE",
			"GYOUKI", "SUMMONED_SKULL"
		],
		"stats": {
			"win": 0,
			"loss": 0,
			"draw": 0
		},
		"match_history": []
	}
	_save_players()
	return { "success": true, "player": players_data[username].duplicate() }

# ===========================================================================
# login(username, password) ‚Üí Dict
# X√°c th·ª±c ƒëƒÉng nh·∫≠p
# ===========================================================================
func login(username, password):
	if not players_data.has(username):
		return { "success": false, "error": "USER_NOT_FOUND" }

	var data = players_data[username]
	if data["password_hash"] != _hash_password(password):
		return { "success": false, "error": "INVALID_PASSWORD" }

	data["last_login"] = OS.get_unix_time()
	_save_players()

	return { "success": true, "player": data.duplicate() }

# ===========================================================================
# get_player(username) ‚Üí Dict
# L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i (kh√¥ng bao g·ªìm password)
# ===========================================================================
func get_player(username):
	if not players_data.has(username):
		return {}
	var p = players_data[username].duplicate()
	p.erase("password_hash")
	return p

# ===========================================================================
# update_stats(username, win, loss, draw)
# C·∫≠p nh·∫≠t th·ªëng k√™ sau tr·∫≠n ƒë·∫•u
# ===========================================================================
func update_stats(username, win=0, loss=0, draw=0):
	if not players_data.has(username):
		return
	players_data[username]["stats"]["win"] += win
	players_data[username]["stats"]["loss"] += loss
	players_data[username]["stats"]["draw"] += draw
	_save_players()

# ===========================================================================
# add_match_history(username, opponent, result, room_id)
# Th√™m l·ªãch s·ª≠ tr·∫≠n ƒë·∫•u
# ===========================================================================
func add_match_history(username, opponent, result, room_id):
	if not players_data.has(username):
		return
	players_data[username]["match_history"].append({
		"opponent": opponent,
		"result": result,  # "win", "loss", "draw"
		"room_id": room_id,
		"timestamp": OS.get_unix_time()
	})
	_save_players()

# ===========================================================================
# get_deck(username) ‚Üí Array
# L·∫•y b·ªô b√†i c·ªßa ng∆∞·ªùi ch∆°i
# ===========================================================================
func get_deck(username):
	return players_data.get(username, {}).get("deck", [
		"BLUE_EYES_WHITE_DRAGON", "DARK_MAGICIAN",
		"POT_OF_GREED", "MONSTER_REBORN", "MIRROR_FORCE"
	])

# ===========================================================================
# _hash_password(password) ‚Üí String
# Hash ƒë∆°n gi·∫£n (kh√¥ng d√πng MD5 th·∫≠t, ch·ªâ m√¥ ph·ªèng)
# ===========================================================================
func _hash_password(password):
	var hash_ = 5381
	for c in password.to_ascii():
		hash_ = (hash_ * 33) + c
	return str(hash_)

# ===========================================================================
# create_guest() ‚Üí Dict
# T·∫°o ng∆∞·ªùi ch∆°i t·∫°m (guest)
# ===========================================================================
func create_guest():
	var guest_id = "guest_%d" % (OS.get_unix_time() % 10000)
	var deck = [
		"GYOUKI", "SUMMONED_SKULL", "POT_OF_GREED",
		"TRAP_HOLE", "SUIJIN", "DARK_MAGICIAN"
	]
	players_data[guest_id] = {
		"username": guest_id,
		"password_hash": "",
		"created_at": OS.get_unix_time(),
		"last_login": OS.get_unix_time(),
		"lp": 8000,
		"deck": deck,
		"stats": { "win": 0, "loss": 0, "draw": 0 },
		"match_history": [],
		"is_guest": true
	}
	_save_players()
	return { "success": true, "player": players_data[guest_id].duplicate() }
